Line	Purpose	Category
import numpy as np	Math & Arrays	Computation
import pandas as pd	Data manipulation	Data handling
import yfinance as yf	Fetch stock market data	Finance
import matplotlib.pyplot as plt	Plotting charts	Visualization
import seaborn as sns	Statistical plotting with style	Visualization
sns.set()	Set prettier default plot styles	Styling

def 
(Step	Action	Purpose
1	Import libraries	Set up tools for finance, math, and plotting
2	Define assets and w	Choose stocks and set weights
3	Download prices with yfinance	Get historical stock prices
4	Convert index to datetime	Enable time-based analysis
5	Calculate r	Compute daily stock returns
6	Compute r_port	Get total daily portfolio return
7	Inspect results	See the first few rows for confirmation)

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

assets = ['MSFT', 'AAPL', 'AMZN', 'TSLA', 'GOOGL'] # Assets for portfolio
w = np.array([0.1, 0.2, 0.1, 0.4, 0.2]) # Weights of each asset

asset_prices = yf.download(assets, start='2018-01-01', end='2023-01-01', auto_adjust = False)['Adj Close'] # Downloading daily data
asset_prices.index = pd.to_datetime(asset_prices.index) # Setting index as datetime object
r = asset_prices.pct_change().dropna() # Calculating daily percent returns
r.head() # Each column is r_{i}

r_port = r @ w # Creating portfolio returns
r_port.name = 'portfolio_returns'
r_port.head()
